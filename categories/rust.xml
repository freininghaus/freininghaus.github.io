<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frank Reininghaus (Posts about rust)</title><link>https://freininghaus.github.io/</link><description></description><atom:link href="https://freininghaus.github.io/categories/rust.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:frank78ac@googlemail.com"&gt;Frank Reininghaus&lt;/a&gt; </copyright><lastBuildDate>Sun, 04 Feb 2024 22:17:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Learn Rust by building a Brainfuck interpreter, part 1: implement the tape and model the program as an abstract syntax tree</title><link>https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/</link><dc:creator>Frank Reininghaus</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered" id="cell-id=26524732-e864-4158-a826-9e0772f14cac"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Motivation"&gt;Motivation&lt;a class="anchor-link" href="https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/#Motivation"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For many years, C++ used to be my favourite language for performance-critical applications. I find Python much more convenient for many use cases, but I have always enjoyed employing zero-cost abstractions and writing generic code that can be compiled to optimal assembly.&lt;/p&gt;
&lt;p&gt;However, C++ has a number of downsides, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problems that arise from &lt;a href="https://en.cppreference.com/w/c/language/behavior"&gt;undefined bahaviour&lt;/a&gt; in the code,&lt;a href="https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/#fn:undefined-behavior"&gt;&lt;sup id="fnref:undefined-behavior"&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;all the baggage it carries due to its backwards compatibility with almost all C++ code and much of the C code that has ever been written.
A consequence is that C++ is more cumbersome and error-prone to use than more modern languages, and that developers are less productive than they could be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust tries to address these issues and enable excellent performance at the same time, so I decided that I should give it a try a few years ago. I started playing around with it for &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; problems, enjoyed it a lot, and wondered what practice project I could try next.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>rust</category><guid>https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/</guid><pubDate>Sun, 04 Feb 2024 21:23:02 GMT</pubDate></item></channel></rss>