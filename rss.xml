<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frank Reininghaus</title><link>https://freininghaus.github.io/</link><description>Frank Reininghaus' website</description><atom:link href="https://freininghaus.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 &lt;a href="mailto:frank78ac@googlemail.com"&gt;Frank Reininghaus&lt;/a&gt; </copyright><lastBuildDate>Sun, 31 Mar 2024 20:59:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Learn Rust by building a Brainfuck interpreter, part 1: implement the tape and model the program as an abstract syntax tree</title><link>https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/</link><dc:creator>Frank Reininghaus</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered" id="cell-id=26524732-e864-4158-a826-9e0772f14cac"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Motivation"&gt;Motivation&lt;a class="anchor-link" href="https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/#Motivation"&gt;Â¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For many years, C++ used to be my favourite language for performance-critical applications. I find Python much more convenient for many use cases, but I have always enjoyed employing zero-cost abstractions and writing generic code that can be compiled to optimal assembly.&lt;/p&gt;
&lt;p&gt;However, C++ has a number of downsides, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problems that arise from &lt;a href="https://en.cppreference.com/w/c/language/behavior"&gt;undefined bahaviour&lt;/a&gt; in the code,&lt;a href="https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/#fn:undefined-behavior"&gt;&lt;sup id="fnref:undefined-behavior"&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;all the baggage it carries due to its backwards compatibility with almost all C++ code and much of the C code that has ever been written.
A consequence is that C++ is more cumbersome and error-prone to use than more modern languages, and that developers are less productive than they could be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust tries to address these issues and enable excellent performance at the same time, so I decided that I should give it a try a few years ago. I started playing around with it for &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; problems, enjoyed it a lot, and wondered what practice project I could try next.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/"&gt;Read moreâ€¦&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>rust</category><guid>https://freininghaus.github.io/blog/2024/02/04/brainfuck-interpreter-in-rust-part1/</guid><pubDate>Sun, 04 Feb 2024 21:23:02 GMT</pubDate></item><item><title>How to set up a local Kubernetes cluster and deploy a self-made microservice in less than 10 minutes</title><link>https://freininghaus.github.io/blog/2022/07/12/set-up-local-k8s-cluster-and-deploy-self-made-microservice/</link><dc:creator>Frank Reininghaus</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered" id="cell-id=c150e8c8-dfba-4a83-8720-aec90058d953"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Nowadays, many server applications are not installed and run directly on physical hosts or virtual machines any more. Instead, application code is often built into container images, and run in so-called &lt;em&gt;pods&lt;/em&gt; in a Kubernetes cluster. Kubernetes provides a standardized way to orchestrate applications and works the same way no matter where the cluster is running.&lt;/p&gt;
&lt;p&gt;Kubernetes clusters are often hosted and managed by cloud providers. They can also be deployed on-premise though, and either be created and managed by a service provider, or with tools like &lt;a href="https://github.com/kubernetes-sigs/kubespray"&gt;Kubespray&lt;/a&gt;. Most clusters are long-lived, and consist of multiple nodes for redundancy.&lt;/p&gt;
&lt;p&gt;However, sometimes a cluster that can be created and discarded quickly and easily on a single computer can be very useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A developer might want to create a cluster on their development machine for playing around with Kubernetes, exploring the newest tools, or testing their newly developed code and Kubernetes resources. If they used a cluster that is shared with others or even with production workloads instead, they might get into the way of others, or worse, break things that should better not break.&lt;/li&gt;
&lt;li&gt;Another use case is automated testing of application deployments in Kubernetes, or testing of applications that interact with Kubernetes resources themselves. This works best in a dedicated cluster that is set up in a clean state just for this purpose, and thrown away after the tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://freininghaus.github.io/blog/2022/07/12/set-up-local-k8s-cluster-and-deploy-self-made-microservice/"&gt;Read moreâ€¦&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>docker</category><category>kubernetes</category><guid>https://freininghaus.github.io/blog/2022/07/12/set-up-local-k8s-cluster-and-deploy-self-made-microservice/</guid><pubDate>Tue, 12 Jul 2022 20:01:51 GMT</pubDate></item><item><title>Getting rid of waste: manipulating calendars with Python and the ics library</title><link>https://freininghaus.github.io/blog/2022/03/01/getting-rid-of-waste-manipulating-calendars-with-python-and-ics/</link><dc:creator>Frank Reininghaus</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered" id="cell-id=a0e06963"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In the city where I live, four different kinds of waste are collected regularly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;paper,&lt;/li&gt;
&lt;li&gt;organic waste,&lt;/li&gt;
&lt;li&gt;the "yellow bag" which is for all sorts of packaging, and&lt;/li&gt;
&lt;li&gt;residual waste, which contains all the rest (except batteries, dangerous chemicals and a couple of other things, which people have to bring to collection facilities themselves).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At first sight, the days on which I have to take out the different bins and bags seem easy enough to remember: usually, everything is collected on the same day of the week. However, there are different schedules for the different kinds of waste (biweekly or every four weeks in my part of the city). Moreover, in weeks with bank holidays, the collection is often shifted to another weekday.&lt;/p&gt;
&lt;p&gt;Fortunately, the city council provides &lt;a href="https://en.wikipedia.org/wiki/ICalendar"&gt;iCalendar&lt;/a&gt; files (&lt;code&gt;*.ical&lt;/code&gt;) with all waste collection dates for the current year &lt;a href="https://serviceportal.aachen.de/abfallnavi"&gt;at its website&lt;/a&gt;. The downloaded file can easily be imported into any calendar application. I found that the structure of the events in the file could be made more convenient though.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://freininghaus.github.io/blog/2022/03/01/getting-rid-of-waste-manipulating-calendars-with-python-and-ics/"&gt;Read moreâ€¦&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://freininghaus.github.io/blog/2022/03/01/getting-rid-of-waste-manipulating-calendars-with-python-and-ics/</guid><pubDate>Tue, 01 Mar 2022 21:24:59 GMT</pubDate></item><item><title>New blog</title><link>https://freininghaus.github.io/blog/2022/03/01/new-blog/</link><dc:creator>Frank Reininghaus</dc:creator><description>&lt;p&gt;Today I am starting a new blog. ðŸ™‚&lt;/p&gt;
&lt;p&gt;I used to have a Wordpress blog at &lt;a href="https://freininghaus.wordpress.com/"&gt;https://freininghaus.wordpress.com/&lt;/a&gt;. I started it when I got involved more and more with &lt;a href="https://kde.org/"&gt;KDE&lt;/a&gt; and especially its file manager Dolphin.&lt;/p&gt;
&lt;p&gt;When I stopped working on KDE because of changes in my personal life, one of the main reasons for writing blog posts regularly was gone. So I quit blogging.&lt;/p&gt;
&lt;p&gt;I have missed writing in public though, and I have accumulated quite a few posts in various stages of completion during the past few years. And I have ideas for even more!&lt;/p&gt;
&lt;p&gt;However, I could never motivate myself to revive my old blog, among other things because static site generators look much more attractive than platforms like Wordpress to me now. Therefore, I have finally decided to start something new. After looking at a few of the many options available, I chose &lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt;, mostly because of its native suppot for &lt;a href="https://jupyter.org/"&gt;Jupyter&lt;/a&gt; notebooks, and because I felt that I can get a result that I am happy with without investing too much effort.&lt;/p&gt;
&lt;p&gt;I will write about my adventures in software development and other topics that I care about. I hope that this will be fun and will also help myself to structure my thoughts better and preserve them for my future self. If that turns out to be interesting for a wider audience, then this is an appreciated side effect, but not the main goal.&lt;/p&gt;
&lt;p&gt;If you want to be updated about future posts, feel free to subscibe to the RSS feed or &lt;a href="https://twitter.com/f_reininghaus"&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;</description><category>meta</category><guid>https://freininghaus.github.io/blog/2022/03/01/new-blog/</guid><pubDate>Tue, 01 Mar 2022 21:12:11 GMT</pubDate></item></channel></rss>